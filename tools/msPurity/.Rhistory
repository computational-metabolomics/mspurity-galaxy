if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("msPurity")
install.packages(c('dbplyr', 'dplyr'))
install.packages(c('dplyr'))
install.packages(c('dplyr'))
install.packages(c('dplyr'))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("msPurity")
library(msPurity)
??msPurity
??msPurity::purityA
?msPurity::purityA
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("xcms")
?msPurity::createDatabase
xset<-"/tmp/tmpX9rDr7/files/000/dataset_2.dat"
xset <- "/tmp/tmpX9rDr7/files/000/dataset_1.dat"
pa<-"/tmp/tmpX9rDr7/files/000/dataset_2.dat"
pa <- readRDS(system.file("extdata", "tests", "purityA", "9_averageAllFragSpectra_with_filter_pa.rds", package="msPurity"))
xset <- readRDS(system.file("extdata","tests", "xcms", "msms_only_xset.rds", package="msPurity"))
msmsPths <- list.files(system.file("extdata", "lcms", "mzML", package="msPurityData"), full.names = TRUE, pattern = "MSMS")
pa@fileList[1] <- msmsPths[basename(msmsPths)=="LCMSMS_1.mzML"]
pa@fileList[2] <- msmsPths[basename(msmsPths)=="LCMSMS_2.mzML"]
xset@filepaths[1] <- msmsPths[basename(msmsPths)=="LCMSMS_1.mzML"]
xset@filepaths[2] <- msmsPths[basename(msmsPths)=="LCMSMS_2.mzML"]
td <- tempdir()
db_pth = createDatabase(pa, xset, outDir = td)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("msPurityData")
pa <- readRDS(system.file("extdata", "tests", "purityA", "9_averageAllFragSpectra_with_filter_pa.rds", package="msPurity"))
xset <- readRDS(system.file("extdata","tests", "xcms", "msms_only_xset.rds", package="msPurity"))
msmsPths <- list.files(system.file("extdata", "lcms", "mzML", package="msPurityData"), full.names = TRUE, pattern = "MSMS")
pa@fileList[1] <- msmsPths[basename(msmsPths)=="LCMSMS_1.mzML"]
pa@fileList[2] <- msmsPths[basename(msmsPths)=="LCMSMS_2.mzML"]
xset@filepaths[1] <- msmsPths[basename(msmsPths)=="LCMSMS_1.mzML"]
xset@filepaths[2] <- msmsPths[basename(msmsPths)=="LCMSMS_2.mzML"]
td <- tempdir()
db_pth = createDatabase(pa, xset, outDir = td)
db_pth = createDatabase(pa, xset, outDir = td, dbName = 'test.db')
print(opt$dbName)
db_pth = createDatabase(pa, xset, outDir = td, dbName = 'test.db', grpPeaklist = NA)
db_pth = createDatabase(pa, xset, outDir = td, dbName = 'test2.db', grpPeaklist = NA)
db_pth = createDatabase(pa, xset, outDir = td, dbName = 'test2.db', grpPeaklist = NA, xsa=NA)
db_pth = createDatabase(pa, xset, outDir = td, dbName = 'test2.db', grpPeaklist = NA, xsa=NULL)
db_pth = createDatabase(pa, xset, outDir = td, dbName = 'test3.db', grpPeaklist = NA, xsa=NULL)
pa@filter_frag_params$allfrag
load('/tmp/tmpUbbgX9/files/000/dataset_2.dat')
load('/tmp/tmpBfVg8H/files/000/dataset_2.dat')
load('/tmp/tmpQ88rul/files/000/dataset_2.dat')
oa
pa
pa@filter_frag_params
load('/home/tomnl/Dropbox/code/msPurity-galaxy/tools/msPurity/test-data/averageFragSpectra_output_all.RData')
pa
pa@filter_frag_params$allfrag
createDatabase(pa, xset)
load('/home/tomnl/Dropbox/code/msPurity-galaxy/tools/msPurity/test-data/xset_group_LCMS_1_LCMS_2_LCMSMS_1_LCMSMS_2.RData')
createDatabase(pa, xset)
createDatabase(pa, xset)
xset_pa_filename_fix <- function(opt, pa, xset){
if (!is.null(opt$mzML_files) && !is.null(opt$galaxy_names)){
# NOTE: Relies on the pa@fileList having the names of files given as 'names' of the variables
# needs to be done due to Galaxy moving the files around and screwing up any links to files
filepaths <- trimws(strsplit(opt$mzML_files, ',')[[1]])
filepaths <- filepaths[filepaths != ""]
new_names <- basename(filepaths)
galaxy_names <- trimws(strsplit(opt$galaxy_names, ',')[[1]])
galaxy_names <- galaxy_names[galaxy_names != ""]
nsave <- names(pa@fileList)
old_filenames  <- basename(pa@fileList)
pa@fileList <- filepaths[match(names(pa@fileList), galaxy_names)]
names(pa@fileList) <- nsave
pa@puritydf$filename <- basename(pa@fileList[match(pa@puritydf$filename, old_filenames)])
pa@grped_df$filename <- basename(pa@fileList[match(pa@grped_df$filename, old_filenames)])
}
if(!all(basename(pa@fileList)==basename(xset@filepaths))){
if(!all(names(pa@fileList)==basename(xset@filepaths))){
print('FILELISTS DO NOT MATCH')
message('FILELISTS DO NOT MATCH')
quit(status = 1)
}else{
xset@filepaths <- unname(pa@fileList)
}
}
print(xset@phenoData)
print(xset@filepaths)
return(list(pa, xset))
}
fix <- xset_pa_filename_fix(opt, pa, xset)
msPurity::spectralMatching()
?msPurity::spectralMatching
